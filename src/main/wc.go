package main

import (
	"../mapreduce"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part II).
	arrs :=strings.FieldsFunc(contents, unicode.IsSpace)
	vector := make([]mapreduce.KeyValue, 0)
	for _, item := range arrs {
		word := strings.Trim(item, " ")
		afterSplit := splitStatement(word)
		//afterSplit = handleGenitive(afterSplit)
		for _, w := range afterSplit {
			if len(w) <= 1 || containsDigits(w){
				continue
			}
			kv := mapreduce.KeyValue{}
			kv.Key = w
			kv.Value = "1"
			vector = append(vector, kv)
		}
	}
	return vector
}

func splitStatement(statement string) []string {
	var arr = make([]string, 0)
	arr = strings.FieldsFunc(statement, func(r rune) bool {
		return r == '!' || r == ',' || r == '"' || r == '-' || r == '?' || r == '\'' || r == ';' ||
			r == '.' || r == '#' || r == '(' || r == ')' || r == '[' || r == ']' || r == '&' || r == '*' || r == '$'
	})
	return arr
}

func handleGenitive(words []string) []string {
	genitiveRegexp := regexp.MustCompile("([a-zA-Z]*)'s")
	for idx, item := range words {
		matches := genitiveRegexp.FindStringSubmatch(item)

		if len(matches) > 2 {
			fmt.Printf("handleGenitive error: %s \n", item)
			panic("error")
		}
		if len(matches) == 2 {
			words[idx] = matches[1]
		}
	}
	return words
}

func containsDigits(word string) bool {
	res := false
	for _, ch := range word {
		if ch >= '0' && ch <= '9' {
			res = true
			break
		}
	}
	return res
}


//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// Your code here (Part II).
	var dict = make(map[string]int)
	var res string
	for _, word := range values {
		v, ok := dict[word]
		if ok == false {
			dict[word] = 1
		} else {
			dict[word] = v + 1
		}
	}
	for _, v := range dict {
		res += strconv.Itoa(v)
		res += "\n"
	}
	res = strings.TrimRight(res, "\n")
	return res
}



// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
